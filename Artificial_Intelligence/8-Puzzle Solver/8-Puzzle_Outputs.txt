My outputs have the beginning state at the bottom of the output,
and then every step taken toward the goal is printed above the
previous step.

-------------uninformedSearch outputs-------------

initialState = makeState(1, 2, 3, 0, 5, 6, 4, 7, 8)
goalState = makeState(1, 2, 3, 4, 5, 6, 7, 8, 0)
testUninformedSearch(initialState, goalState, 500)

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


[1, 2, 3]
[4, 5, 0]
[7, 8, 6]


[1, 2, 3]
[4, 0, 5]
[7, 8, 6]


[1, 2, 3]
[4, 8, 5]
[7, 0, 6]


[1, 2, 3]
[4, 8, 5]
[7, 6, 0]


[1, 2, 3]
[4, 8, 0]
[7, 6, 5]


[1, 2, 3]
[4, 0, 8]
[7, 6, 5]


[1, 2, 3]
[4, 6, 8]
[7, 0, 5]


[1, 2, 3]
[4, 6, 8]
[7, 5, 0]


[1, 2, 3]
[4, 6, 0]
[7, 5, 8]


[1, 2, 3]
[4, 0, 6]
[7, 5, 8]


[1, 2, 3]
[0, 4, 6]
[7, 5, 8]


[1, 2, 3]
[7, 4, 6]
[0, 5, 8]


[1, 2, 3]
[7, 4, 6]
[5, 0, 8]


[1, 2, 3]
[7, 4, 6]
[5, 8, 0]


[1, 2, 3]
[7, 4, 0]
[5, 8, 6]


[1, 2, 3]
[7, 0, 4]
[5, 8, 6]


[1, 2, 3]
[7, 8, 4]
[5, 0, 6]


[1, 2, 3]
[7, 8, 4]
[5, 6, 0]


[1, 2, 3]
[7, 8, 0]
[5, 6, 4]


[1, 2, 3]
[7, 0, 8]
[5, 6, 4]


[1, 2, 3]
[7, 6, 8]
[5, 0, 4]


[1, 2, 3]
[7, 6, 8]
[5, 4, 0]


[1, 2, 3]
[7, 6, 0]
[5, 4, 8]


[1, 2, 3]
[7, 0, 6]
[5, 4, 8]


[1, 2, 3]
[0, 7, 6]
[5, 4, 8]


[1, 2, 3]
[5, 7, 6]
[0, 4, 8]


[1, 2, 3]
[5, 7, 6]
[4, 0, 8]


[1, 2, 3]
[5, 7, 6]
[4, 8, 0]


[1, 2, 3]
[5, 7, 0]
[4, 8, 6]


[1, 2, 3]
[5, 0, 7]
[4, 8, 6]


[1, 2, 3]
[5, 8, 7]
[4, 0, 6]


[1, 2, 3]
[5, 8, 7]
[4, 6, 0]


[1, 2, 3]
[5, 8, 0]
[4, 6, 7]


[1, 2, 3]
[5, 0, 8]
[4, 6, 7]


[1, 2, 3]
[5, 6, 8]
[4, 0, 7]


[1, 2, 3]
[5, 6, 8]
[4, 7, 0]


[1, 2, 3]
[5, 6, 0]
[4, 7, 8]


[1, 2, 3]
[5, 0, 6]
[4, 7, 8]


[1, 2, 3]
[0, 5, 6]
[4, 7, 8]


The program ran 39 times

initialState = makeState(1, 2, 3, 4, 5, 6, 7, 8, 0)
goalState = makeState(1, 2, 3, 4, 5, 6, 0, 7, 8)
testUninformedSearch(initialState, goalState, 2000)

[1, 2, 3]
[4, 5, 6]
[7, 0, 8]


[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


The program ran 2 times

initialState = makeState(0, 1, 2, 4, 5, 3, 7, 8, 6)
goalState = makeState(1, 2, 3, 4, 5, 6, 7, 8, 0)
testUninformedSearch(initialState, goalState, 500)

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


[1, 2, 3]
[4, 5, 0]
[7, 8, 6]


[1, 2, 0]
[4, 5, 3]
[7, 8, 6]


[1, 0, 2]
[4, 5, 3]
[7, 8, 6]


[0, 1, 2]
[4, 5, 3]
[7, 8, 6]


The program ran 4 times


-------------informedSearchDistance outputs--------------
Using the distance heuristic

initialState = makeState(1, 2, 3, 4, 5, 0, 7, 8, 6)
goalState = makeState(1, 2, 3, 4, 5, 6, 7, 8, 0)
testInformedSearchDistance(initialState, goalState, 2000)

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


[1, 2, 3]
[4, 5, 0]
[7, 8, 6]


The program ran 1 times

initialState = makeState(0, 1, 2, 4, 5, 3, 7, 8, 6)
goalState = makeState(1, 2, 3, 4, 5, 6, 7, 8, 0)
testInformedSearchDistance(initialState, goalState, 2000)

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


[1, 2, 3]
[4, 5, 0]
[7, 8, 6]


[1, 2, 0]
[4, 5, 3]
[7, 8, 6]


[1, 0, 2]
[4, 5, 3]
[7, 8, 6]


[1, 5, 2]
[4, 0, 3]
[7, 8, 6]


[1, 5, 2]
[4, 3, 0]
[7, 8, 6]


[1, 5, 2]
[4, 3, 6]
[7, 8, 0]


[1, 5, 2]
[4, 3, 0]
[7, 8, 6]


[1, 5, 2]
[4, 0, 3]
[7, 8, 6]


[1, 5, 2]
[4, 8, 3]
[7, 0, 6]


[1, 5, 2]
[4, 8, 3]
[7, 6, 0]


[1, 5, 2]
[4, 8, 3]
[7, 0, 6]


[1, 5, 2]
[4, 0, 3]
[7, 8, 6]


[1, 0, 2]
[4, 5, 3]
[7, 8, 6]


[0, 1, 2]
[4, 5, 3]
[7, 8, 6]


The program ran 14 times

------------informedSearchMisplaced outputs------------
Using a misplaced tiles heuristic

initialState = makeState(0, 1, 2, 4, 5, 3, 7, 8, 6)
goalState = makeState(1, 2, 3, 4, 5, 6, 7, 8, 0)
testInformedSearchMisplaced(initialState, goalState, 500)

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


[1, 2, 3]
[4, 5, 0]
[7, 8, 6]


[1, 2, 0]
[4, 5, 3]
[7, 8, 6]


[1, 0, 2]
[4, 5, 3]
[7, 8, 6]


[0, 1, 2]
[4, 5, 3]
[7, 8, 6]

initialState = makeState(1, 2, 3, 4, 0, 5, 7, 8, 6)
goalState = makeState(1, 2, 3, 4, 5, 6, 7, 8, 0)
testInformedSearchMisplaced(initialState, goalState, 500)

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


[1, 2, 3]
[4, 5, 0]
[7, 8, 6]


[1, 2, 3]
[4, 0, 5]
[7, 8, 6]


The program ran 2 times
